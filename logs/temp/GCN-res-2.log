/root/code/DIR/DIR-GNN/train/cora.py:393: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict(torch.load(f"./pkl/{save_name}.pkl"))
/root/code/DIR/DIR-GNN/train/cora.py:393: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict(torch.load(f"./pkl/{save_name}.pkl"))
Seed:  0
GCN(
  (convs): ModuleList(
    (0): GCNConv(1433, 128)
    (1): GCNConv(128, 7)
  )
  (residual_fc): Linear(in_features=1433, out_features=128, bias=True)
)
Epoch: 1, Loss: 1.9337, Train: 0.4214, Val: 0.2280, Test: 0.2580
Epoch: 2, Loss: 1.8623, Train: 0.7357, Val: 0.3700, Test: 0.4150
Epoch: 3, Loss: 1.7861, Train: 0.9000, Val: 0.5060, Test: 0.5380
Epoch: 4, Loss: 1.7118, Train: 0.9357, Val: 0.6060, Test: 0.6110
Epoch: 5, Loss: 1.6295, Train: 0.9714, Val: 0.6500, Test: 0.6640
Epoch: 6, Loss: 1.5503, Train: 0.9786, Val: 0.6860, Test: 0.6990
Epoch: 7, Loss: 1.4648, Train: 0.9857, Val: 0.6980, Test: 0.7130
Epoch: 8, Loss: 1.3708, Train: 0.9857, Val: 0.7220, Test: 0.7300
Epoch: 9, Loss: 1.2976, Train: 0.9857, Val: 0.7260, Test: 0.7420
Epoch: 10, Loss: 1.1974, Train: 0.9857, Val: 0.7320, Test: 0.7580
Epoch: 11, Loss: 1.1195, Train: 0.9857, Val: 0.7440, Test: 0.7660
Epoch: 12, Loss: 1.0380, Train: 0.9857, Val: 0.7540, Test: 0.7730
Epoch: 13, Loss: 0.9554, Train: 0.9857, Val: 0.7620, Test: 0.7810
Epoch: 14, Loss: 0.8921, Train: 0.9857, Val: 0.7660, Test: 0.7820
Epoch: 15, Loss: 0.8154, Train: 0.9857, Val: 0.7700, Test: 0.7830
Epoch: 16, Loss: 0.7493, Train: 0.9857, Val: 0.7720, Test: 0.7840
Epoch: 17, Loss: 0.6851, Train: 0.9929, Val: 0.7780, Test: 0.7870
Epoch: 18, Loss: 0.6394, Train: 0.9929, Val: 0.7800, Test: 0.7920
Epoch: 19, Loss: 0.5706, Train: 0.9929, Val: 0.7780, Test: 0.7930
Epoch: 20, Loss: 0.5250, Train: 0.9929, Val: 0.7820, Test: 0.7960
Epoch: 21, Loss: 0.4850, Train: 0.9929, Val: 0.7800, Test: 0.8000
Epoch: 22, Loss: 0.4524, Train: 0.9929, Val: 0.7840, Test: 0.8020
Epoch: 23, Loss: 0.3883, Train: 0.9929, Val: 0.7860, Test: 0.8020
Epoch: 24, Loss: 0.3646, Train: 0.9929, Val: 0.7840, Test: 0.8030
Epoch: 25, Loss: 0.3314, Train: 1.0000, Val: 0.7860, Test: 0.8020
Epoch: 26, Loss: 0.3125, Train: 1.0000, Val: 0.7860, Test: 0.8010
Epoch: 27, Loss: 0.2828, Train: 1.0000, Val: 0.7800, Test: 0.8010
Epoch: 28, Loss: 0.2559, Train: 1.0000, Val: 0.7780, Test: 0.8020
Epoch: 29, Loss: 0.2379, Train: 1.0000, Val: 0.7740, Test: 0.8000
Epoch: 30, Loss: 0.2090, Train: 1.0000, Val: 0.7740, Test: 0.8000
Epoch: 31, Loss: 0.2023, Train: 1.0000, Val: 0.7760, Test: 0.7990
Epoch: 32, Loss: 0.1978, Train: 1.0000, Val: 0.7740, Test: 0.7970
Epoch: 33, Loss: 0.1648, Train: 1.0000, Val: 0.7700, Test: 0.7970
Epoch: 34, Loss: 0.1504, Train: 1.0000, Val: 0.7720, Test: 0.7960
Epoch: 35, Loss: 0.1368, Train: 1.0000, Val: 0.7740, Test: 0.7970
Epoch: 36, Loss: 0.1297, Train: 1.0000, Val: 0.7740, Test: 0.7950
Epoch: 37, Loss: 0.1297, Train: 1.0000, Val: 0.7740, Test: 0.7960
Epoch: 38, Loss: 0.1196, Train: 1.0000, Val: 0.7740, Test: 0.7940
Epoch: 39, Loss: 0.1063, Train: 1.0000, Val: 0.7740, Test: 0.7930
Epoch: 40, Loss: 0.1018, Train: 1.0000, Val: 0.7720, Test: 0.7930
Epoch: 41, Loss: 0.0926, Train: 1.0000, Val: 0.7740, Test: 0.7930
Epoch: 42, Loss: 0.0896, Train: 1.0000, Val: 0.7740, Test: 0.7930
Epoch: 43, Loss: 0.0867, Train: 1.0000, Val: 0.7720, Test: 0.7930
Epoch: 44, Loss: 0.0796, Train: 1.0000, Val: 0.7720, Test: 0.7940
Epoch: 45, Loss: 0.0788, Train: 1.0000, Val: 0.7720, Test: 0.7950
Epoch: 46, Loss: 0.0766, Train: 1.0000, Val: 0.7720, Test: 0.7940
Epoch: 47, Loss: 0.0652, Train: 1.0000, Val: 0.7720, Test: 0.7930
Epoch: 48, Loss: 0.0645, Train: 1.0000, Val: 0.7700, Test: 0.7950
Epoch: 49, Loss: 0.0588, Train: 1.0000, Val: 0.7700, Test: 0.7930
Epoch: 50, Loss: 0.0597, Train: 1.0000, Val: 0.7700, Test: 0.7910
MAD:  0.9296
Best Test Accuracy: 0.8030, Val Accuracy: 0.7840, Train Accuracy: 0.9929
Training completed.
Seed:  1
GCN(
  (convs): ModuleList(
    (0): GCNConv(1433, 128)
    (1): GCNConv(128, 7)
  )
  (residual_fc): Linear(in_features=1433, out_features=128, bias=True)
)
Epoch: 1, Loss: 1.9653, Train: 0.3786, Val: 0.2500, Test: 0.2400
Epoch: 2, Loss: 1.8912, Train: 0.7143, Val: 0.3600, Test: 0.3880
Epoch: 3, Loss: 1.8052, Train: 0.8857, Val: 0.4920, Test: 0.5170
Epoch: 4, Loss: 1.7286, Train: 0.9357, Val: 0.5780, Test: 0.5980
Epoch: 5, Loss: 1.6474, Train: 0.9714, Val: 0.6400, Test: 0.6590
Epoch: 6, Loss: 1.5770, Train: 0.9714, Val: 0.6640, Test: 0.7010
Epoch: 7, Loss: 1.4826, Train: 0.9786, Val: 0.6780, Test: 0.7100
Epoch: 8, Loss: 1.4139, Train: 0.9786, Val: 0.6940, Test: 0.7240
Epoch: 9, Loss: 1.3124, Train: 0.9857, Val: 0.7040, Test: 0.7390
Epoch: 10, Loss: 1.2331, Train: 0.9857, Val: 0.7200, Test: 0.7410
Epoch: 11, Loss: 1.1496, Train: 0.9857, Val: 0.7220, Test: 0.7500
Epoch: 12, Loss: 1.0717, Train: 0.9857, Val: 0.7240, Test: 0.7520
Epoch: 13, Loss: 0.9747, Train: 0.9929, Val: 0.7380, Test: 0.7590
Epoch: 14, Loss: 0.9063, Train: 0.9929, Val: 0.7460, Test: 0.7640
Epoch: 15, Loss: 0.8347, Train: 0.9929, Val: 0.7500, Test: 0.7710
Epoch: 16, Loss: 0.7439, Train: 0.9929, Val: 0.7520, Test: 0.7740
Epoch: 17, Loss: 0.7068, Train: 0.9929, Val: 0.7560, Test: 0.7760
Epoch: 18, Loss: 0.6367, Train: 0.9929, Val: 0.7540, Test: 0.7780
Epoch: 19, Loss: 0.5875, Train: 0.9929, Val: 0.7560, Test: 0.7840
Epoch: 20, Loss: 0.5495, Train: 0.9929, Val: 0.7620, Test: 0.7860
Epoch: 21, Loss: 0.4792, Train: 0.9929, Val: 0.7640, Test: 0.7870
Epoch: 22, Loss: 0.4535, Train: 0.9929, Val: 0.7660, Test: 0.7880
Epoch: 23, Loss: 0.4025, Train: 0.9929, Val: 0.7680, Test: 0.7910
Epoch: 24, Loss: 0.3638, Train: 0.9929, Val: 0.7680, Test: 0.7880
Epoch: 25, Loss: 0.3354, Train: 0.9929, Val: 0.7720, Test: 0.7930
Epoch: 26, Loss: 0.3129, Train: 0.9929, Val: 0.7720, Test: 0.7910
Epoch: 27, Loss: 0.2856, Train: 1.0000, Val: 0.7740, Test: 0.7930
Epoch: 28, Loss: 0.2605, Train: 1.0000, Val: 0.7740, Test: 0.7970
Epoch: 29, Loss: 0.2409, Train: 1.0000, Val: 0.7720, Test: 0.7970
Epoch: 30, Loss: 0.2149, Train: 1.0000, Val: 0.7720, Test: 0.7940
Epoch: 31, Loss: 0.1931, Train: 1.0000, Val: 0.7720, Test: 0.7940
Epoch: 32, Loss: 0.1891, Train: 1.0000, Val: 0.7720, Test: 0.7950
Epoch: 33, Loss: 0.1719, Train: 1.0000, Val: 0.7740, Test: 0.7940
Epoch: 34, Loss: 0.1496, Train: 1.0000, Val: 0.7740, Test: 0.7950
Epoch: 35, Loss: 0.1431, Train: 1.0000, Val: 0.7740, Test: 0.7940
Epoch: 36, Loss: 0.1336, Train: 1.0000, Val: 0.7760, Test: 0.7930
Epoch: 37, Loss: 0.1286, Train: 1.0000, Val: 0.7760, Test: 0.7920
Epoch: 38, Loss: 0.1281, Train: 1.0000, Val: 0.7700, Test: 0.7940
Epoch: 39, Loss: 0.1213, Train: 1.0000, Val: 0.7700, Test: 0.7910
Epoch: 40, Loss: 0.1065, Train: 1.0000, Val: 0.7720, Test: 0.7930
Epoch: 41, Loss: 0.0964, Train: 1.0000, Val: 0.7720, Test: 0.7910
Epoch: 42, Loss: 0.0929, Train: 1.0000, Val: 0.7740, Test: 0.7880
Epoch: 43, Loss: 0.0849, Train: 1.0000, Val: 0.7740, Test: 0.7890
Epoch: 44, Loss: 0.0901, Train: 1.0000, Val: 0.7740, Test: 0.7890
Epoch: 45, Loss: 0.0756, Train: 1.0000, Val: 0.7760, Test: 0.7870
Epoch: 46, Loss: 0.0766, Train: 1.0000, Val: 0.7760, Test: 0.7850
Epoch: 47, Loss: 0.0722, Train: 1.0000, Val: 0.7760, Test: 0.7850
Epoch: 48, Loss: 0.0677, Train: 1.0000, Val: 0.7760, Test: 0.7850
Epoch: 49, Loss: 0.0627, Train: 1.0000, Val: 0.7760, Test: 0.7860
Epoch: 50, Loss: 0.0592, Train: 1.0000, Val: 0.7740, Test: 0.7850
MAD:  0.839
Best Test Accuracy: 0.7970, Val Accuracy: 0.7740, Train Accuracy: 1.0000
Training completed.
Seed:  2
GCN(
  (convs): ModuleList(
    (0): GCNConv(1433, 128)
    (1): GCNConv(128, 7)
  )
  (residual_fc): Linear(in_features=1433, out_features=128, bias=True)
)
Epoch: 1, Loss: 1.9461, Train: 0.4857, Val: 0.1760, Test: 0.2010
Epoch: 2, Loss: 1.8647, Train: 0.7214, Val: 0.3160, Test: 0.3200
Epoch: 3, Loss: 1.7973, Train: 0.8357, Val: 0.4100, Test: 0.4260
Epoch: 4, Loss: 1.7260, Train: 0.9071, Val: 0.5180, Test: 0.5220
Epoch: 5, Loss: 1.6563, Train: 0.9429, Val: 0.5740, Test: 0.5850
Epoch: 6, Loss: 1.5688, Train: 0.9714, Val: 0.6280, Test: 0.6340
Epoch: 7, Loss: 1.4976, Train: 0.9857, Val: 0.6580, Test: 0.6540
Epoch: 8, Loss: 1.4091, Train: 0.9857, Val: 0.6780, Test: 0.6840
Epoch: 9, Loss: 1.3316, Train: 0.9857, Val: 0.6860, Test: 0.7080
Epoch: 10, Loss: 1.2364, Train: 0.9857, Val: 0.7040, Test: 0.7230
Epoch: 11, Loss: 1.1607, Train: 0.9857, Val: 0.7100, Test: 0.7320
Epoch: 12, Loss: 1.0851, Train: 0.9857, Val: 0.7280, Test: 0.7390
Epoch: 13, Loss: 0.9988, Train: 0.9857, Val: 0.7320, Test: 0.7440
/root/code/DIR/DIR-GNN/train/cora.py:393: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict(torch.load(f"./pkl/{save_name}.pkl"))
/root/code/DIR/DIR-GNN/train/cora.py:393: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict(torch.load(f"./pkl/{save_name}.pkl"))
Epoch: 14, Loss: 0.9150, Train: 0.9857, Val: 0.7380, Test: 0.7500
Epoch: 15, Loss: 0.8488, Train: 0.9929, Val: 0.7480, Test: 0.7530
Epoch: 16, Loss: 0.7859, Train: 0.9929, Val: 0.7520, Test: 0.7570
Epoch: 17, Loss: 0.7309, Train: 0.9929, Val: 0.7560, Test: 0.7600
Epoch: 18, Loss: 0.6623, Train: 0.9929, Val: 0.7640, Test: 0.7670
Epoch: 19, Loss: 0.6006, Train: 0.9929, Val: 0.7640, Test: 0.7730
Epoch: 20, Loss: 0.5476, Train: 0.9929, Val: 0.7640, Test: 0.7760
Epoch: 21, Loss: 0.5030, Train: 0.9929, Val: 0.7660, Test: 0.7790
Epoch: 22, Loss: 0.4632, Train: 0.9929, Val: 0.7720, Test: 0.7800
Epoch: 23, Loss: 0.4359, Train: 0.9929, Val: 0.7760, Test: 0.7810
Epoch: 24, Loss: 0.3909, Train: 0.9929, Val: 0.7740, Test: 0.7870
Epoch: 25, Loss: 0.3759, Train: 0.9929, Val: 0.7720, Test: 0.7940
Epoch: 26, Loss: 0.3357, Train: 1.0000, Val: 0.7740, Test: 0.7970
Epoch: 27, Loss: 0.2986, Train: 1.0000, Val: 0.7740, Test: 0.7970
Epoch: 28, Loss: 0.2902, Train: 1.0000, Val: 0.7760, Test: 0.8000
Epoch: 29, Loss: 0.2617, Train: 1.0000, Val: 0.7780, Test: 0.8010
Epoch: 30, Loss: 0.2304, Train: 1.0000, Val: 0.7740, Test: 0.8000
Epoch: 31, Loss: 0.2101, Train: 1.0000, Val: 0.7720, Test: 0.8010
Epoch: 32, Loss: 0.2087, Train: 1.0000, Val: 0.7740, Test: 0.8020
Epoch: 33, Loss: 0.1816, Train: 1.0000, Val: 0.7740, Test: 0.8040
Epoch: 34, Loss: 0.1846, Train: 1.0000, Val: 0.7740, Test: 0.8040
Epoch: 35, Loss: 0.1662, Train: 1.0000, Val: 0.7760, Test: 0.8020
Epoch: 36, Loss: 0.1513, Train: 1.0000, Val: 0.7740, Test: 0.8010
Epoch: 37, Loss: 0.1392, Train: 1.0000, Val: 0.7740, Test: 0.8000
Epoch: 38, Loss: 0.1278, Train: 1.0000, Val: 0.7740, Test: 0.7970
Epoch: 39, Loss: 0.1234, Train: 1.0000, Val: 0.7740, Test: 0.7970
Epoch: 40, Loss: 0.1157, Train: 1.0000, Val: 0.7740, Test: 0.7970
Epoch: 41, Loss: 0.1092, Train: 1.0000, Val: 0.7740, Test: 0.7970
Epoch: 42, Loss: 0.1004, Train: 1.0000, Val: 0.7720, Test: 0.7960
Epoch: 43, Loss: 0.0930, Train: 1.0000, Val: 0.7720, Test: 0.7970
Epoch: 44, Loss: 0.0872, Train: 1.0000, Val: 0.7700, Test: 0.7960
Epoch: 45, Loss: 0.0845, Train: 1.0000, Val: 0.7700, Test: 0.7960
Epoch: 46, Loss: 0.0801, Train: 1.0000, Val: 0.7700, Test: 0.7950
Epoch: 47, Loss: 0.0778, Train: 1.0000, Val: 0.7700, Test: 0.7900
Epoch: 48, Loss: 0.0712, Train: 1.0000, Val: 0.7700, Test: 0.7900
Epoch: 49, Loss: 0.0726, Train: 1.0000, Val: 0.7700, Test: 0.7890
Epoch: 50, Loss: 0.0667, Train: 1.0000, Val: 0.7700, Test: 0.7890
MAD:  0.8494
Best Test Accuracy: 0.8040, Val Accuracy: 0.7740, Train Accuracy: 1.0000
Training completed.
Seed:  3
GCN(
  (convs): ModuleList(
    (0): GCNConv(1433, 128)
    (1): GCNConv(128, 7)
  )
  (residual_fc): Linear(in_features=1433, out_features=128, bias=True)
)
Epoch: 1, Loss: 1.9579, Train: 0.3357, Val: 0.1320, Test: 0.1520
Epoch: 2, Loss: 1.8749, Train: 0.7071, Val: 0.2420, Test: 0.2700
Epoch: 3, Loss: 1.8024, Train: 0.8571, Val: 0.3300, Test: 0.3890
Epoch: 4, Loss: 1.7246, Train: 0.9000, Val: 0.4320, Test: 0.4860
Epoch: 5, Loss: 1.6516, Train: 0.9500, Val: 0.5080, Test: 0.5480
Epoch: 6, Loss: 1.5654, Train: 0.9500, Val: 0.5560, Test: 0.5980
Epoch: 7, Loss: 1.4831, Train: 0.9643, Val: 0.6000, Test: 0.6340
Epoch: 8, Loss: 1.3986, Train: 0.9643, Val: 0.6300, Test: 0.6600
Epoch: 9, Loss: 1.3267, Train: 0.9857, Val: 0.6580, Test: 0.6730
Epoch: 10, Loss: 1.2329, Train: 0.9857, Val: 0.6680, Test: 0.6890
Epoch: 11, Loss: 1.1668, Train: 0.9857, Val: 0.6880, Test: 0.6990
Epoch: 12, Loss: 1.0900, Train: 0.9857, Val: 0.7040, Test: 0.7070
Epoch: 13, Loss: 1.0037, Train: 0.9857, Val: 0.7120, Test: 0.7240
Epoch: 14, Loss: 0.9053, Train: 0.9857, Val: 0.7160, Test: 0.7350
Epoch: 15, Loss: 0.8276, Train: 0.9857, Val: 0.7200, Test: 0.7390
Epoch: 16, Loss: 0.7676, Train: 0.9857, Val: 0.7320, Test: 0.7460
Epoch: 17, Loss: 0.7015, Train: 0.9857, Val: 0.7320, Test: 0.7550
Epoch: 18, Loss: 0.6726, Train: 0.9857, Val: 0.7420, Test: 0.7590
Epoch: 19, Loss: 0.6010, Train: 0.9929, Val: 0.7460, Test: 0.7640
Epoch: 20, Loss: 0.5432, Train: 0.9929, Val: 0.7460, Test: 0.7660
Epoch: 21, Loss: 0.5035, Train: 0.9929, Val: 0.7480, Test: 0.7720
Epoch: 22, Loss: 0.4567, Train: 0.9929, Val: 0.7580, Test: 0.7740
Epoch: 23, Loss: 0.4144, Train: 0.9929, Val: 0.7660, Test: 0.7770
Epoch: 24, Loss: 0.3761, Train: 0.9929, Val: 0.7660, Test: 0.7790
Epoch: 25, Loss: 0.3363, Train: 0.9929, Val: 0.7660, Test: 0.7840
Epoch: 26, Loss: 0.3125, Train: 1.0000, Val: 0.7640, Test: 0.7840
Epoch: 27, Loss: 0.3005, Train: 1.0000, Val: 0.7640, Test: 0.7840
Epoch: 28, Loss: 0.2670, Train: 1.0000, Val: 0.7640, Test: 0.7870
Epoch: 29, Loss: 0.2501, Train: 1.0000, Val: 0.7660, Test: 0.7900
Epoch: 30, Loss: 0.2387, Train: 1.0000, Val: 0.7640, Test: 0.7900
Epoch: 31, Loss: 0.2176, Train: 1.0000, Val: 0.7620, Test: 0.7910
Epoch: 32, Loss: 0.1904, Train: 1.0000, Val: 0.7620, Test: 0.7910
Epoch: 33, Loss: 0.1874, Train: 1.0000, Val: 0.7640, Test: 0.7910
Epoch: 34, Loss: 0.1637, Train: 1.0000, Val: 0.7640, Test: 0.7900
Epoch: 35, Loss: 0.1566, Train: 1.0000, Val: 0.7660, Test: 0.7880
Epoch: 36, Loss: 0.1391, Train: 1.0000, Val: 0.7660, Test: 0.7880
Epoch: 37, Loss: 0.1288, Train: 1.0000, Val: 0.7660, Test: 0.7870
Epoch: 38, Loss: 0.1172, Train: 1.0000, Val: 0.7660, Test: 0.7840
Epoch: 39, Loss: 0.1123, Train: 1.0000, Val: 0.7700, Test: 0.7850
Epoch: 40, Loss: 0.1088, Train: 1.0000, Val: 0.7700, Test: 0.7860
Epoch: 41, Loss: 0.0989, Train: 1.0000, Val: 0.7700, Test: 0.7850
Epoch: 42, Loss: 0.0958, Train: 1.0000, Val: 0.7700, Test: 0.7860
Epoch: 43, Loss: 0.0943, Train: 1.0000, Val: 0.7700, Test: 0.7860
Epoch: 44, Loss: 0.0853, Train: 1.0000, Val: 0.7700, Test: 0.7860
Epoch: 45, Loss: 0.0757, Train: 1.0000, Val: 0.7700, Test: 0.7870
Epoch: 46, Loss: 0.0783, Train: 1.0000, Val: 0.7720, Test: 0.7860
Epoch: 47, Loss: 0.0796, Train: 1.0000, Val: 0.7740, Test: 0.7850
Epoch: 48, Loss: 0.0679, Train: 1.0000, Val: 0.7740, Test: 0.7880
Epoch: 49, Loss: 0.0663, Train: 1.0000, Val: 0.7760, Test: 0.7890
Epoch: 50, Loss: 0.0685, Train: 1.0000, Val: 0.7760, Test: 0.7890
MAD:  0.9197
Best Test Accuracy: 0.7910, Val Accuracy: 0.7620, Train Accuracy: 1.0000
Training completed.
Seed:  4
GCN(
  (convs): ModuleList(
    (0): GCNConv(1433, 128)
    (1): GCNConv(128, 7)
  )
  (residual_fc): Linear(in_features=1433, out_features=128, bias=True)
)
Epoch: 1, Loss: 1.9603, Train: 0.3643, Val: 0.2880, Test: 0.2330
Epoch: 2, Loss: 1.8747, Train: 0.7000, Val: 0.4180, Test: 0.4080
Epoch: 3, Loss: 1.7955, Train: 0.8857, Val: 0.5080, Test: 0.5120
Epoch: 4, Loss: 1.7238, Train: 0.9357, Val: 0.5600, Test: 0.5550
Epoch: 5, Loss: 1.6469, Train: 0.9429, Val: 0.5880, Test: 0.6020
Epoch: 6, Loss: 1.5692, Train: 0.9571, Val: 0.6220, Test: 0.6300
Epoch: 7, Loss: 1.4898, Train: 0.9643, Val: 0.6540, Test: 0.6600
Epoch: 8, Loss: 1.4081, Train: 0.9643, Val: 0.6720, Test: 0.6850
Epoch: 9, Loss: 1.3234, Train: 0.9714, Val: 0.6940, Test: 0.6980
Epoch: 10, Loss: 1.2360, Train: 0.9714, Val: 0.7160, Test: 0.7180
Epoch: 11, Loss: 1.1573, Train: 0.9786, Val: 0.7400, Test: 0.7370
Epoch: 12, Loss: 1.0894, Train: 0.9786, Val: 0.7540, Test: 0.7460
Epoch: 13, Loss: 1.0003, Train: 0.9786, Val: 0.7540, Test: 0.7600
Epoch: 14, Loss: 0.9172, Train: 0.9857, Val: 0.7620, Test: 0.7760
Epoch: 15, Loss: 0.8347, Train: 0.9929, Val: 0.7740, Test: 0.7830
Epoch: 16, Loss: 0.7847, Train: 0.9929, Val: 0.7820, Test: 0.7930
Epoch: 17, Loss: 0.7036, Train: 0.9929, Val: 0.7860, Test: 0.8000
Epoch: 18, Loss: 0.6609, Train: 0.9929, Val: 0.7880, Test: 0.7990
Epoch: 19, Loss: 0.5996, Train: 0.9929, Val: 0.7880, Test: 0.8020
Epoch: 20, Loss: 0.5663, Train: 0.9929, Val: 0.7900, Test: 0.8050
Epoch: 21, Loss: 0.5048, Train: 0.9929, Val: 0.7920, Test: 0.8010
Epoch: 22, Loss: 0.4606, Train: 0.9929, Val: 0.7880, Test: 0.8040
Epoch: 23, Loss: 0.4328, Train: 0.9929, Val: 0.7880, Test: 0.8030
Epoch: 24, Loss: 0.3926, Train: 0.9929, Val: 0.7880, Test: 0.8030
Epoch: 25, Loss: 0.3599, Train: 1.0000, Val: 0.7860, Test: 0.8040
Epoch: 26, Loss: 0.3322, Train: 1.0000, Val: 0.7860, Test: 0.8020
Epoch: 27, Loss: 0.2994, Train: 1.0000, Val: 0.7840, Test: 0.8000
Epoch: 28, Loss: 0.2741, Train: 1.0000, Val: 0.7840, Test: 0.7980
Epoch: 29, Loss: 0.2531, Train: 1.0000, Val: 0.7780, Test: 0.7980
/root/code/DIR/DIR-GNN/train/cora.py:393: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict(torch.load(f"./pkl/{save_name}.pkl"))
/root/code/DIR/DIR-GNN/train/cora.py:393: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict(torch.load(f"./pkl/{save_name}.pkl"))
Epoch: 30, Loss: 0.2285, Train: 1.0000, Val: 0.7780, Test: 0.7980
Epoch: 31, Loss: 0.2158, Train: 1.0000, Val: 0.7800, Test: 0.7980
Epoch: 32, Loss: 0.1907, Train: 1.0000, Val: 0.7820, Test: 0.7990
Epoch: 33, Loss: 0.1845, Train: 1.0000, Val: 0.7780, Test: 0.8000
Epoch: 34, Loss: 0.1695, Train: 1.0000, Val: 0.7760, Test: 0.8010
Epoch: 35, Loss: 0.1538, Train: 1.0000, Val: 0.7780, Test: 0.8010
Epoch: 36, Loss: 0.1538, Train: 1.0000, Val: 0.7780, Test: 0.7990
Epoch: 37, Loss: 0.1386, Train: 1.0000, Val: 0.7780, Test: 0.7990
Epoch: 38, Loss: 0.1248, Train: 1.0000, Val: 0.7760, Test: 0.7990
Epoch: 39, Loss: 0.1191, Train: 1.0000, Val: 0.7760, Test: 0.8000
Epoch: 40, Loss: 0.1146, Train: 1.0000, Val: 0.7760, Test: 0.7990
Epoch: 41, Loss: 0.1062, Train: 1.0000, Val: 0.7760, Test: 0.7980
Epoch: 42, Loss: 0.0984, Train: 1.0000, Val: 0.7760, Test: 0.8000
Epoch: 43, Loss: 0.0926, Train: 1.0000, Val: 0.7720, Test: 0.8000
Epoch: 44, Loss: 0.0884, Train: 1.0000, Val: 0.7720, Test: 0.8000
Epoch: 45, Loss: 0.0819, Train: 1.0000, Val: 0.7720, Test: 0.8000
Epoch: 46, Loss: 0.0782, Train: 1.0000, Val: 0.7720, Test: 0.8000
Epoch: 47, Loss: 0.0767, Train: 1.0000, Val: 0.7720, Test: 0.8010
Epoch: 48, Loss: 0.0704, Train: 1.0000, Val: 0.7740, Test: 0.8000
Epoch: 49, Loss: 0.0707, Train: 1.0000, Val: 0.7760, Test: 0.8000
Epoch: 50, Loss: 0.0686, Train: 1.0000, Val: 0.7740, Test: 0.8010
MAD:  0.8396
Best Test Accuracy: 0.8050, Val Accuracy: 0.7900, Train Accuracy: 0.9929
Training completed.
Seed:  5
GCN(
  (convs): ModuleList(
    (0): GCNConv(1433, 128)
    (1): GCNConv(128, 7)
  )
  (residual_fc): Linear(in_features=1433, out_features=128, bias=True)
)
Epoch: 1, Loss: 1.9392, Train: 0.5571, Val: 0.3940, Test: 0.3750
Epoch: 2, Loss: 1.8626, Train: 0.8214, Val: 0.5200, Test: 0.5220
Epoch: 3, Loss: 1.7811, Train: 0.9429, Val: 0.6320, Test: 0.6070
Epoch: 4, Loss: 1.7097, Train: 0.9714, Val: 0.6800, Test: 0.6720
Epoch: 5, Loss: 1.6174, Train: 0.9714, Val: 0.7060, Test: 0.7060
Epoch: 6, Loss: 1.5529, Train: 0.9714, Val: 0.7180, Test: 0.7200
Epoch: 7, Loss: 1.4456, Train: 0.9714, Val: 0.7220, Test: 0.7290
Epoch: 8, Loss: 1.3735, Train: 0.9786, Val: 0.7280, Test: 0.7450
Epoch: 9, Loss: 1.2815, Train: 0.9786, Val: 0.7280, Test: 0.7590
Epoch: 10, Loss: 1.1798, Train: 0.9857, Val: 0.7420, Test: 0.7640
Epoch: 11, Loss: 1.1209, Train: 0.9857, Val: 0.7420, Test: 0.7680
Epoch: 12, Loss: 1.0240, Train: 0.9857, Val: 0.7500, Test: 0.7750
Epoch: 13, Loss: 0.9572, Train: 0.9857, Val: 0.7540, Test: 0.7750
Epoch: 14, Loss: 0.8757, Train: 0.9857, Val: 0.7560, Test: 0.7740
Epoch: 15, Loss: 0.8041, Train: 0.9857, Val: 0.7540, Test: 0.7800
Epoch: 16, Loss: 0.7463, Train: 0.9929, Val: 0.7620, Test: 0.7860
Epoch: 17, Loss: 0.6903, Train: 0.9929, Val: 0.7680, Test: 0.7870
Epoch: 18, Loss: 0.6311, Train: 0.9929, Val: 0.7740, Test: 0.7900
Epoch: 19, Loss: 0.5861, Train: 0.9929, Val: 0.7760, Test: 0.7890
Epoch: 20, Loss: 0.5261, Train: 0.9929, Val: 0.7780, Test: 0.7910
Epoch: 21, Loss: 0.4724, Train: 0.9929, Val: 0.7760, Test: 0.7920
Epoch: 22, Loss: 0.4481, Train: 0.9929, Val: 0.7760, Test: 0.7920
Epoch: 23, Loss: 0.3885, Train: 0.9929, Val: 0.7780, Test: 0.7920
Epoch: 24, Loss: 0.3806, Train: 1.0000, Val: 0.7780, Test: 0.7950
Epoch: 25, Loss: 0.3312, Train: 1.0000, Val: 0.7800, Test: 0.7950
Epoch: 26, Loss: 0.3194, Train: 1.0000, Val: 0.7820, Test: 0.7960
Epoch: 27, Loss: 0.2906, Train: 1.0000, Val: 0.7800, Test: 0.7980
Epoch: 28, Loss: 0.2619, Train: 1.0000, Val: 0.7780, Test: 0.7950
Epoch: 29, Loss: 0.2365, Train: 1.0000, Val: 0.7780, Test: 0.7940
Epoch: 30, Loss: 0.2298, Train: 1.0000, Val: 0.7780, Test: 0.7950
Epoch: 31, Loss: 0.2230, Train: 1.0000, Val: 0.7780, Test: 0.7980
Epoch: 32, Loss: 0.1912, Train: 1.0000, Val: 0.7760, Test: 0.7980
Epoch: 33, Loss: 0.1775, Train: 1.0000, Val: 0.7720, Test: 0.7980
Epoch: 34, Loss: 0.1630, Train: 1.0000, Val: 0.7760, Test: 0.7990
Epoch: 35, Loss: 0.1531, Train: 1.0000, Val: 0.7760, Test: 0.8000
Epoch: 36, Loss: 0.1423, Train: 1.0000, Val: 0.7760, Test: 0.8030
Epoch: 37, Loss: 0.1326, Train: 1.0000, Val: 0.7760, Test: 0.8030
Epoch: 38, Loss: 0.1268, Train: 1.0000, Val: 0.7760, Test: 0.8030
Epoch: 39, Loss: 0.1216, Train: 1.0000, Val: 0.7760, Test: 0.8020
Epoch: 40, Loss: 0.1194, Train: 1.0000, Val: 0.7760, Test: 0.8030
Epoch: 41, Loss: 0.1012, Train: 1.0000, Val: 0.7760, Test: 0.8010
Epoch: 42, Loss: 0.1015, Train: 1.0000, Val: 0.7760, Test: 0.7990
Epoch: 43, Loss: 0.0859, Train: 1.0000, Val: 0.7760, Test: 0.7990
Epoch: 44, Loss: 0.0883, Train: 1.0000, Val: 0.7760, Test: 0.7980
Epoch: 45, Loss: 0.0807, Train: 1.0000, Val: 0.7740, Test: 0.7970
Epoch: 46, Loss: 0.0742, Train: 1.0000, Val: 0.7780, Test: 0.7960
Epoch: 47, Loss: 0.0735, Train: 1.0000, Val: 0.7800, Test: 0.7970
Epoch: 48, Loss: 0.0698, Train: 1.0000, Val: 0.7800, Test: 0.7970
Epoch: 49, Loss: 0.0682, Train: 1.0000, Val: 0.7800, Test: 0.7980
Epoch: 50, Loss: 0.0675, Train: 1.0000, Val: 0.7800, Test: 0.7980
MAD:  0.8852
Best Test Accuracy: 0.8030, Val Accuracy: 0.7760, Train Accuracy: 1.0000
Training completed.
Seed:  6
GCN(
  (convs): ModuleList(
    (0): GCNConv(1433, 128)
    (1): GCNConv(128, 7)
  )
  (residual_fc): Linear(in_features=1433, out_features=128, bias=True)
)
Epoch: 1, Loss: 1.9591, Train: 0.3929, Val: 0.2000, Test: 0.1940
Epoch: 2, Loss: 1.8816, Train: 0.7429, Val: 0.3440, Test: 0.3800
Epoch: 3, Loss: 1.8120, Train: 0.8643, Val: 0.4740, Test: 0.5000
Epoch: 4, Loss: 1.7300, Train: 0.9500, Val: 0.5640, Test: 0.5720
Epoch: 5, Loss: 1.6510, Train: 0.9714, Val: 0.6280, Test: 0.6230
Epoch: 6, Loss: 1.5826, Train: 0.9786, Val: 0.6580, Test: 0.6590
Epoch: 7, Loss: 1.4980, Train: 0.9786, Val: 0.6860, Test: 0.6800
Epoch: 8, Loss: 1.4236, Train: 0.9857, Val: 0.7000, Test: 0.7010
Epoch: 9, Loss: 1.3264, Train: 0.9929, Val: 0.7080, Test: 0.7140
Epoch: 10, Loss: 1.2566, Train: 0.9929, Val: 0.7220, Test: 0.7200
Epoch: 11, Loss: 1.1742, Train: 0.9929, Val: 0.7340, Test: 0.7300
Epoch: 12, Loss: 1.0842, Train: 0.9929, Val: 0.7360, Test: 0.7380
Epoch: 13, Loss: 1.0024, Train: 0.9929, Val: 0.7400, Test: 0.7420
Epoch: 14, Loss: 0.9295, Train: 0.9929, Val: 0.7440, Test: 0.7520
Epoch: 15, Loss: 0.8617, Train: 0.9929, Val: 0.7480, Test: 0.7560
Epoch: 16, Loss: 0.7984, Train: 0.9929, Val: 0.7540, Test: 0.7610
Epoch: 17, Loss: 0.7237, Train: 0.9929, Val: 0.7580, Test: 0.7630
Epoch: 18, Loss: 0.6762, Train: 0.9929, Val: 0.7620, Test: 0.7640
Epoch: 19, Loss: 0.5972, Train: 0.9929, Val: 0.7660, Test: 0.7680
Epoch: 20, Loss: 0.5632, Train: 0.9929, Val: 0.7720, Test: 0.7780
Epoch: 21, Loss: 0.5218, Train: 0.9929, Val: 0.7740, Test: 0.7790
Epoch: 22, Loss: 0.4670, Train: 0.9929, Val: 0.7740, Test: 0.7870
Epoch: 23, Loss: 0.4285, Train: 0.9929, Val: 0.7780, Test: 0.7910
Epoch: 24, Loss: 0.3985, Train: 0.9929, Val: 0.7780, Test: 0.7930
Epoch: 25, Loss: 0.3618, Train: 0.9929, Val: 0.7800, Test: 0.7950
Epoch: 26, Loss: 0.3534, Train: 0.9929, Val: 0.7780, Test: 0.7940
Epoch: 27, Loss: 0.3053, Train: 0.9929, Val: 0.7800, Test: 0.7960
Epoch: 28, Loss: 0.2913, Train: 0.9929, Val: 0.7820, Test: 0.7980
Epoch: 29, Loss: 0.2679, Train: 0.9929, Val: 0.7820, Test: 0.7980
Epoch: 30, Loss: 0.2345, Train: 1.0000, Val: 0.7840, Test: 0.7970
Epoch: 31, Loss: 0.2205, Train: 1.0000, Val: 0.7820, Test: 0.7970
Epoch: 32, Loss: 0.2066, Train: 1.0000, Val: 0.7840, Test: 0.7980
Epoch: 33, Loss: 0.1843, Train: 1.0000, Val: 0.7840, Test: 0.7980
Epoch: 34, Loss: 0.1814, Train: 1.0000, Val: 0.7840, Test: 0.7970
Epoch: 35, Loss: 0.1534, Train: 1.0000, Val: 0.7840, Test: 0.8010
Epoch: 36, Loss: 0.1528, Train: 1.0000, Val: 0.7860, Test: 0.8000
Epoch: 37, Loss: 0.1429, Train: 1.0000, Val: 0.7820, Test: 0.8000
Epoch: 38, Loss: 0.1323, Train: 1.0000, Val: 0.7800, Test: 0.8010
Epoch: 39, Loss: 0.1191, Train: 1.0000, Val: 0.7800, Test: 0.8010
Epoch: 40, Loss: 0.1145, Train: 1.0000, Val: 0.7820, Test: 0.8010
Epoch: 41, Loss: 0.1070, Train: 1.0000, Val: 0.7820, Test: 0.8020
Epoch: 42, Loss: 0.1017, Train: 1.0000, Val: 0.7820, Test: 0.8000
Epoch: 43, Loss: 0.1003, Train: 1.0000, Val: 0.7800, Test: 0.7980
Epoch: 44, Loss: 0.0868, Train: 1.0000, Val: 0.7780, Test: 0.7980
Epoch: 45, Loss: 0.0830, Train: 1.0000, Val: 0.7760, Test: 0.8030
/root/code/DIR/DIR-GNN/train/cora.py:393: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict(torch.load(f"./pkl/{save_name}.pkl"))
/root/code/DIR/DIR-GNN/train/cora.py:393: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict(torch.load(f"./pkl/{save_name}.pkl"))
/root/code/DIR/DIR-GNN/train/cora.py:393: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict(torch.load(f"./pkl/{save_name}.pkl"))
Epoch: 46, Loss: 0.0879, Train: 1.0000, Val: 0.7760, Test: 0.8040
Epoch: 47, Loss: 0.0725, Train: 1.0000, Val: 0.7760, Test: 0.8050
Epoch: 48, Loss: 0.0712, Train: 1.0000, Val: 0.7760, Test: 0.8030
Epoch: 49, Loss: 0.0704, Train: 1.0000, Val: 0.7740, Test: 0.8030
Epoch: 50, Loss: 0.0675, Train: 1.0000, Val: 0.7740, Test: 0.8020
MAD:  0.9475
Best Test Accuracy: 0.8050, Val Accuracy: 0.7760, Train Accuracy: 1.0000
Training completed.
Seed:  7
GCN(
  (convs): ModuleList(
    (0): GCNConv(1433, 128)
    (1): GCNConv(128, 7)
  )
  (residual_fc): Linear(in_features=1433, out_features=128, bias=True)
)
Epoch: 1, Loss: 1.9573, Train: 0.4500, Val: 0.3700, Test: 0.3460
Epoch: 2, Loss: 1.8732, Train: 0.7786, Val: 0.5420, Test: 0.5280
Epoch: 3, Loss: 1.8014, Train: 0.9143, Val: 0.5900, Test: 0.6100
Epoch: 4, Loss: 1.7188, Train: 0.9500, Val: 0.6500, Test: 0.6570
Epoch: 5, Loss: 1.6367, Train: 0.9571, Val: 0.6760, Test: 0.6820
Epoch: 6, Loss: 1.5517, Train: 0.9643, Val: 0.7000, Test: 0.7040
Epoch: 7, Loss: 1.4760, Train: 0.9643, Val: 0.7140, Test: 0.7190
Epoch: 8, Loss: 1.3681, Train: 0.9857, Val: 0.7340, Test: 0.7280
Epoch: 9, Loss: 1.2895, Train: 0.9857, Val: 0.7460, Test: 0.7400
Epoch: 10, Loss: 1.2049, Train: 0.9857, Val: 0.7540, Test: 0.7610
Epoch: 11, Loss: 1.1223, Train: 0.9857, Val: 0.7600, Test: 0.7710
Epoch: 12, Loss: 1.0300, Train: 0.9857, Val: 0.7680, Test: 0.7780
Epoch: 13, Loss: 0.9478, Train: 0.9857, Val: 0.7720, Test: 0.7850
Epoch: 14, Loss: 0.8783, Train: 0.9857, Val: 0.7780, Test: 0.7870
Epoch: 15, Loss: 0.8231, Train: 0.9857, Val: 0.7800, Test: 0.7900
Epoch: 16, Loss: 0.7475, Train: 0.9929, Val: 0.7800, Test: 0.7900
Epoch: 17, Loss: 0.6861, Train: 0.9929, Val: 0.7800, Test: 0.7910
Epoch: 18, Loss: 0.6129, Train: 0.9929, Val: 0.7820, Test: 0.7960
Epoch: 19, Loss: 0.5605, Train: 0.9929, Val: 0.7820, Test: 0.7980
Epoch: 20, Loss: 0.5160, Train: 0.9929, Val: 0.7800, Test: 0.7960
Epoch: 21, Loss: 0.4697, Train: 0.9929, Val: 0.7800, Test: 0.7950
Epoch: 22, Loss: 0.4204, Train: 0.9929, Val: 0.7820, Test: 0.7970
Epoch: 23, Loss: 0.3996, Train: 0.9929, Val: 0.7820, Test: 0.7960
Epoch: 24, Loss: 0.3545, Train: 0.9929, Val: 0.7780, Test: 0.7980
Epoch: 25, Loss: 0.3288, Train: 0.9929, Val: 0.7780, Test: 0.7980
Epoch: 26, Loss: 0.2912, Train: 0.9929, Val: 0.7780, Test: 0.8010
Epoch: 27, Loss: 0.2713, Train: 1.0000, Val: 0.7780, Test: 0.8020
Epoch: 28, Loss: 0.2531, Train: 1.0000, Val: 0.7760, Test: 0.8020
Epoch: 29, Loss: 0.2269, Train: 1.0000, Val: 0.7780, Test: 0.8000
Epoch: 30, Loss: 0.2056, Train: 1.0000, Val: 0.7800, Test: 0.7990
Epoch: 31, Loss: 0.1995, Train: 1.0000, Val: 0.7760, Test: 0.7980
Epoch: 32, Loss: 0.1815, Train: 1.0000, Val: 0.7740, Test: 0.7970
Epoch: 33, Loss: 0.1633, Train: 1.0000, Val: 0.7760, Test: 0.7970
Epoch: 34, Loss: 0.1546, Train: 1.0000, Val: 0.7760, Test: 0.7970
Epoch: 35, Loss: 0.1422, Train: 1.0000, Val: 0.7760, Test: 0.7960
Epoch: 36, Loss: 0.1307, Train: 1.0000, Val: 0.7760, Test: 0.7960
Epoch: 37, Loss: 0.1177, Train: 1.0000, Val: 0.7760, Test: 0.7960
Epoch: 38, Loss: 0.1241, Train: 1.0000, Val: 0.7780, Test: 0.7950
Epoch: 39, Loss: 0.1104, Train: 1.0000, Val: 0.7780, Test: 0.7940
Epoch: 40, Loss: 0.1050, Train: 1.0000, Val: 0.7780, Test: 0.7940
Epoch: 41, Loss: 0.0889, Train: 1.0000, Val: 0.7780, Test: 0.7930
Epoch: 42, Loss: 0.0868, Train: 1.0000, Val: 0.7760, Test: 0.7950
Epoch: 43, Loss: 0.0826, Train: 1.0000, Val: 0.7760, Test: 0.7930
Epoch: 44, Loss: 0.0799, Train: 1.0000, Val: 0.7760, Test: 0.7930
Epoch: 45, Loss: 0.0791, Train: 1.0000, Val: 0.7760, Test: 0.7950
Epoch: 46, Loss: 0.0747, Train: 1.0000, Val: 0.7760, Test: 0.7940
Epoch: 47, Loss: 0.0711, Train: 1.0000, Val: 0.7760, Test: 0.7940
Epoch: 48, Loss: 0.0648, Train: 1.0000, Val: 0.7760, Test: 0.7940
Epoch: 49, Loss: 0.0615, Train: 1.0000, Val: 0.7760, Test: 0.7940
Epoch: 50, Loss: 0.0615, Train: 1.0000, Val: 0.7760, Test: 0.7930
MAD:  0.9255
Best Test Accuracy: 0.8020, Val Accuracy: 0.7780, Train Accuracy: 1.0000
Training completed.
Seed:  8
GCN(
  (convs): ModuleList(
    (0): GCNConv(1433, 128)
    (1): GCNConv(128, 7)
  )
  (residual_fc): Linear(in_features=1433, out_features=128, bias=True)
)
Epoch: 1, Loss: 1.9496, Train: 0.4000, Val: 0.2220, Test: 0.2440
Epoch: 2, Loss: 1.8612, Train: 0.6714, Val: 0.3920, Test: 0.4170
Epoch: 3, Loss: 1.7990, Train: 0.8643, Val: 0.5420, Test: 0.5690
Epoch: 4, Loss: 1.7175, Train: 0.9500, Val: 0.6400, Test: 0.6570
Epoch: 5, Loss: 1.6423, Train: 0.9643, Val: 0.6760, Test: 0.7070
Epoch: 6, Loss: 1.5663, Train: 0.9857, Val: 0.6960, Test: 0.7330
Epoch: 7, Loss: 1.4937, Train: 0.9857, Val: 0.7140, Test: 0.7570
Epoch: 8, Loss: 1.4210, Train: 0.9857, Val: 0.7240, Test: 0.7690
Epoch: 9, Loss: 1.3371, Train: 0.9857, Val: 0.7260, Test: 0.7800
Epoch: 10, Loss: 1.2399, Train: 0.9857, Val: 0.7400, Test: 0.7860
Epoch: 11, Loss: 1.1741, Train: 0.9857, Val: 0.7460, Test: 0.7890
Epoch: 12, Loss: 1.0790, Train: 0.9857, Val: 0.7460, Test: 0.7890
Epoch: 13, Loss: 1.0061, Train: 0.9857, Val: 0.7560, Test: 0.7950
Epoch: 14, Loss: 0.9466, Train: 0.9857, Val: 0.7640, Test: 0.7990
Epoch: 15, Loss: 0.8507, Train: 0.9857, Val: 0.7640, Test: 0.7990
Epoch: 16, Loss: 0.7960, Train: 0.9857, Val: 0.7680, Test: 0.8010
Epoch: 17, Loss: 0.7508, Train: 0.9857, Val: 0.7680, Test: 0.8000
Epoch: 18, Loss: 0.6707, Train: 0.9929, Val: 0.7720, Test: 0.7990
Epoch: 19, Loss: 0.6299, Train: 0.9929, Val: 0.7780, Test: 0.8000
Epoch: 20, Loss: 0.5624, Train: 0.9929, Val: 0.7800, Test: 0.8010
Epoch: 21, Loss: 0.5197, Train: 0.9929, Val: 0.7800, Test: 0.8040
Epoch: 22, Loss: 0.4846, Train: 0.9929, Val: 0.7800, Test: 0.8020
Epoch: 23, Loss: 0.4427, Train: 0.9929, Val: 0.7800, Test: 0.8040
Epoch: 24, Loss: 0.3982, Train: 0.9929, Val: 0.7780, Test: 0.8060
Epoch: 25, Loss: 0.3476, Train: 0.9929, Val: 0.7800, Test: 0.8070
Epoch: 26, Loss: 0.3457, Train: 0.9929, Val: 0.7800, Test: 0.8070
Epoch: 27, Loss: 0.2977, Train: 1.0000, Val: 0.7820, Test: 0.8070
Epoch: 28, Loss: 0.2960, Train: 1.0000, Val: 0.7860, Test: 0.8080
Epoch: 29, Loss: 0.2577, Train: 1.0000, Val: 0.7840, Test: 0.8080
Epoch: 30, Loss: 0.2393, Train: 1.0000, Val: 0.7840, Test: 0.8090
Epoch: 31, Loss: 0.2327, Train: 1.0000, Val: 0.7840, Test: 0.8130
Epoch: 32, Loss: 0.1916, Train: 1.0000, Val: 0.7840, Test: 0.8130
Epoch: 33, Loss: 0.1948, Train: 1.0000, Val: 0.7780, Test: 0.8070
Epoch: 34, Loss: 0.1770, Train: 1.0000, Val: 0.7760, Test: 0.8050
Epoch: 35, Loss: 0.1616, Train: 1.0000, Val: 0.7760, Test: 0.8030
Epoch: 36, Loss: 0.1531, Train: 1.0000, Val: 0.7760, Test: 0.8030
Epoch: 37, Loss: 0.1379, Train: 1.0000, Val: 0.7760, Test: 0.8020
Epoch: 38, Loss: 0.1296, Train: 1.0000, Val: 0.7760, Test: 0.8020
Epoch: 39, Loss: 0.1169, Train: 1.0000, Val: 0.7760, Test: 0.8020
Epoch: 40, Loss: 0.1157, Train: 1.0000, Val: 0.7760, Test: 0.8020
Epoch: 41, Loss: 0.1071, Train: 1.0000, Val: 0.7740, Test: 0.8010
Epoch: 42, Loss: 0.1009, Train: 1.0000, Val: 0.7740, Test: 0.8000
Epoch: 43, Loss: 0.0918, Train: 1.0000, Val: 0.7740, Test: 0.7990
Epoch: 44, Loss: 0.0982, Train: 1.0000, Val: 0.7760, Test: 0.8010
Epoch: 45, Loss: 0.0896, Train: 1.0000, Val: 0.7760, Test: 0.7990
Epoch: 46, Loss: 0.0823, Train: 1.0000, Val: 0.7760, Test: 0.7980
Epoch: 47, Loss: 0.0775, Train: 1.0000, Val: 0.7760, Test: 0.7970
Epoch: 48, Loss: 0.0733, Train: 1.0000, Val: 0.7760, Test: 0.7970
Epoch: 49, Loss: 0.0691, Train: 1.0000, Val: 0.7760, Test: 0.7970
Epoch: 50, Loss: 0.0611, Train: 1.0000, Val: 0.7760, Test: 0.7970
MAD:  0.8734
Best Test Accuracy: 0.8130, Val Accuracy: 0.7840, Train Accuracy: 1.0000
Training completed.
Seed:  9
GCN(
  (convs): ModuleList(
    (0): GCNConv(1433, 128)
    (1): GCNConv(128, 7)
  )
  (residual_fc): Linear(in_features=1433, out_features=128, bias=True)
)
Epoch: 1, Loss: 1.9549, Train: 0.4071, Val: 0.2780, Test: 0.3190
Epoch: 2, Loss: 1.8745, Train: 0.8500, Val: 0.4300, Test: 0.4920
Epoch: 3, Loss: 1.7984, Train: 0.9571, Val: 0.5760, Test: 0.6160
Epoch: 4, Loss: 1.7249, Train: 0.9786, Val: 0.6220, Test: 0.6840
Epoch: 5, Loss: 1.6400, Train: 0.9857, Val: 0.6640, Test: 0.7190
Epoch: 6, Loss: 1.5591, Train: 0.9857, Val: 0.6960, Test: 0.7380
Epoch: 7, Loss: 1.4878, Train: 0.9857, Val: 0.7220, Test: 0.7510
/root/code/DIR/DIR-GNN/train/cora.py:393: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict(torch.load(f"./pkl/{save_name}.pkl"))
Epoch: 8, Loss: 1.4078, Train: 0.9857, Val: 0.7420, Test: 0.7600
Epoch: 9, Loss: 1.3073, Train: 0.9857, Val: 0.7560, Test: 0.7710
Epoch: 10, Loss: 1.2394, Train: 0.9857, Val: 0.7620, Test: 0.7780
Epoch: 11, Loss: 1.1395, Train: 0.9857, Val: 0.7720, Test: 0.7820
Epoch: 12, Loss: 1.0781, Train: 0.9857, Val: 0.7760, Test: 0.7860
Epoch: 13, Loss: 0.9922, Train: 0.9857, Val: 0.7840, Test: 0.7860
Epoch: 14, Loss: 0.8945, Train: 0.9857, Val: 0.7800, Test: 0.7900
Epoch: 15, Loss: 0.8610, Train: 0.9857, Val: 0.7760, Test: 0.7870
Epoch: 16, Loss: 0.7614, Train: 0.9857, Val: 0.7760, Test: 0.7920
Epoch: 17, Loss: 0.6909, Train: 0.9929, Val: 0.7800, Test: 0.7940
Epoch: 18, Loss: 0.6531, Train: 0.9929, Val: 0.7820, Test: 0.7960
Epoch: 19, Loss: 0.5853, Train: 0.9929, Val: 0.7840, Test: 0.8000
Epoch: 20, Loss: 0.5447, Train: 0.9929, Val: 0.7880, Test: 0.7990
Epoch: 21, Loss: 0.4941, Train: 0.9929, Val: 0.7920, Test: 0.8000
Epoch: 22, Loss: 0.4552, Train: 0.9929, Val: 0.7900, Test: 0.8020
Epoch: 23, Loss: 0.4175, Train: 0.9929, Val: 0.7900, Test: 0.8030
Epoch: 24, Loss: 0.3648, Train: 0.9929, Val: 0.7900, Test: 0.8020
Epoch: 25, Loss: 0.3523, Train: 0.9929, Val: 0.7900, Test: 0.8040
Epoch: 26, Loss: 0.3256, Train: 0.9929, Val: 0.7880, Test: 0.8050
Epoch: 27, Loss: 0.2858, Train: 1.0000, Val: 0.7820, Test: 0.8070
Epoch: 28, Loss: 0.2665, Train: 1.0000, Val: 0.7760, Test: 0.8070
Epoch: 29, Loss: 0.2453, Train: 1.0000, Val: 0.7760, Test: 0.8070
Epoch: 30, Loss: 0.2261, Train: 1.0000, Val: 0.7760, Test: 0.8090
Epoch: 31, Loss: 0.2146, Train: 1.0000, Val: 0.7760, Test: 0.8090
Epoch: 32, Loss: 0.1839, Train: 1.0000, Val: 0.7760, Test: 0.8080
Epoch: 33, Loss: 0.1772, Train: 1.0000, Val: 0.7780, Test: 0.8100
Epoch: 34, Loss: 0.1599, Train: 1.0000, Val: 0.7800, Test: 0.8110
Epoch: 35, Loss: 0.1538, Train: 1.0000, Val: 0.7800, Test: 0.8090
Epoch: 36, Loss: 0.1419, Train: 1.0000, Val: 0.7800, Test: 0.8110
Epoch: 37, Loss: 0.1400, Train: 1.0000, Val: 0.7800, Test: 0.8110
Epoch: 38, Loss: 0.1253, Train: 1.0000, Val: 0.7800, Test: 0.8110
Epoch: 39, Loss: 0.1117, Train: 1.0000, Val: 0.7800, Test: 0.8120
Epoch: 40, Loss: 0.1144, Train: 1.0000, Val: 0.7780, Test: 0.8070
Epoch: 41, Loss: 0.1014, Train: 1.0000, Val: 0.7760, Test: 0.8070
Epoch: 42, Loss: 0.0911, Train: 1.0000, Val: 0.7740, Test: 0.8060
Epoch: 43, Loss: 0.0848, Train: 1.0000, Val: 0.7720, Test: 0.8040
Epoch: 44, Loss: 0.0836, Train: 1.0000, Val: 0.7720, Test: 0.8030
Epoch: 45, Loss: 0.0799, Train: 1.0000, Val: 0.7720, Test: 0.8010
Epoch: 46, Loss: 0.0745, Train: 1.0000, Val: 0.7720, Test: 0.8000
Epoch: 47, Loss: 0.0716, Train: 1.0000, Val: 0.7680, Test: 0.8000
Epoch: 48, Loss: 0.0678, Train: 1.0000, Val: 0.7660, Test: 0.7970
Epoch: 49, Loss: 0.0730, Train: 1.0000, Val: 0.7640, Test: 0.7970
Epoch: 50, Loss: 0.0642, Train: 1.0000, Val: 0.7640, Test: 0.7960
MAD:  0.9096
Best Test Accuracy: 0.8120, Val Accuracy: 0.7800, Train Accuracy: 1.0000
Training completed.
Average Test Accuracy:  0.8035 ± 0.006070420084310463
Average MAD:  0.89185 ± 0.03801947527254946
